# Multi-stage build for frontend optimization
FROM node:18-alpine as base

# Install alpine packages
RUN apk add --no-cache git

WORKDIR /app

# Dependencies stage
FROM base as dependencies

# Copy package files first (for better caching)
COPY package.json package-lock.json* ./

# Install dependencies (this layer will be cached if package.json doesn't change)
RUN npm ci --legacy-peer-deps || npm install --legacy-peer-deps

# Application stage  
FROM dependencies as app

# Copy source code and config files
COPY public/ ./public/
COPY src/ ./src/
COPY tsconfig.json ./

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1

# Start development server
CMD ["npm", "start"]